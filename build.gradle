/*
 * ModReq
 * Copyright (C) 2021 James Lyne
 *
 * Based on ModReq 1.2 (https://www.spigotmc.org/resources/modreq.57560/)
 * Copyright (C) 2019 Aladram and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.gradleup.shadow' version '8.3.5'
    id 'java'
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url = uri('https://repo.papermc.io/repository/maven-public/')
    }

    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }

    maven {
        url = uri('https://repo.minebench.de/')
    }

    maven {
        url = uri('https://jitpack.io')
    }
}

dependencies {
    implementation 'de.themoep:minedown-adventure:1.7.3-SNAPSHOT'
    implementation 'cloud.commandframework:cloud-paper:1.8.4'
    implementation 'cloud.commandframework:cloud-minecraft-extras:1.8.4'
    implementation 'cloud.commandframework:cloud-annotations:1.8.4'
    implementation 'com.zaxxer:HikariCP:5.1.0'
    
    compileOnly 'io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT'
    compileOnly 'com.github.LeonMangler:SuperVanish:6.2.19'
}

group = 'uk.co.notnull'
version = '1.1-SNAPSHOT'
description = 'ModReq'

java.sourceCompatibility = JavaVersion.VERSION_21
java.targetCompatibility = JavaVersion.VERSION_21

tasks {
    processResources {
        from("${project.rootDir}/src/main/resources") {
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
            project.properties.findAll().each {
                prop ->
                    if (prop.value != null && prop.value instanceof java.lang.String) {
                        filter(ReplaceTokens, tokens: [(prop.key): prop.value])
                        filter(ReplaceTokens, tokens: [('project.' + prop.key): prop.value])
                    }
            }
        }
    }

    compileJava {
        options.compilerArgs += ["-Xlint:all", "-Xlint:-processing"]
        options.encoding = 'UTF-8'
    }

    shadowJar {
        archiveClassifier.set('')
        relocate 'cloud.commandframework', 'uk.co.notnull.modreq.shaded.cloud'
        relocate 'io.leangen.geantyref', 'uk.co.notnull.modreq.shaded.typetoken'
    }

    build {
        dependsOn(shadowJar)
    }
}
